{"version":3,"sources":["webpack:///./src/components/tags/Tags.tsx","webpack:///./src/components/post/PostWrittenDate.tsx","webpack:///./src/components/tags/TaggedPostInfo.tsx","webpack:///./src/components/post/PostList.tsx","webpack:///./src/pages/index.tsx"],"names":["Wrapper","styled","div","Tag","a","COLORS","TAG_BG","main","Tags","tags","sort","map","tag","key","href","toKebabCase","WrittenDate","span","PostWrittenDate","date","when","Date","dayOfMonth","getDate","month","getMonth","written","getFullYear","TaggedPostsInfo","tagValue","totalCount","PostListWrapper","PostListItemWrapper","MAIN","PostTitle","FONT","PostList","title","slug","excerpt","Index","data","location","siteTitle","site","siteMetadata","posts","allMarkdownRemark","nodes","pathname","match","postTag","split","taggedPosts","group","find","post","fieldValue","length","LayoutTemplate","i","frontmatter","fields"],"mappings":"2FAAA,6DAKMA,EAAUC,IAAOC,IAAV,oEAAGD,CAAH,yGAUPE,EAAMF,IAAOG,EAAV,gEAAGH,CAAH,+RAOeI,IAAOC,OAClBD,IAAOE,MA0BLC,IAVc,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC5B,OACI,kBAACT,EAAD,KAEQS,EAAKC,OAAOC,KAAI,SAAAC,GAAG,OAAI,kBAACT,EAAD,CAAKU,IAAKD,EAAKE,KAAI,SAAWC,YAAYH,IAASA,S,kCC3C1F,yBAIMI,EAJN,UAIoBf,EAAOgB,KAAV,mFAAGhB,CAAH,0HA4BFiB,IAdoC,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAC5CC,EAAO,IAAIC,KAAKF,GAChBG,EAAaF,EAAKG,UACpBC,EAAQJ,EAAKK,WAAa,EAGxBC,EAFKN,EAAKO,cAEH,KAAeH,EAAf,KAAyBF,EAAzB,IACb,OACI,kBAACN,EAAD,KACKU,K,sGCZEE,EAToC,SAAC,GAA6B,IAA3BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAC/D,OACC,6BACC,oCAAUD,GACV,wCAAcC,K,gDCHXC,EAAkB9B,IAAOC,IAAV,gFAAGD,CAAH,qFAQf+B,EAAsB/B,IAAOC,IAAV,oFAAGD,CAAH,gLAODI,IAAO4B,MAQzBC,EAAYjC,IAAOG,EAAV,0EAAGH,CAAH,uKAKFI,IAAO8B,MAyBLC,EAfiC,SAAC,GAE3C,IADFC,EACE,EADFA,MAAOlB,EACL,EADKA,KAAMV,EACX,EADWA,KAAM6B,EACjB,EADiBA,KACjB,EADuBC,QAGzB,OACI,kBAACR,EAAD,KACI,kBAACC,EAAD,KACI,kBAACE,EAAD,CAAWpB,KAAMwB,GAAOD,GACxB,kBAACnB,EAAA,EAAD,CAAiBC,KAAMA,KAE3B,kBAACX,EAAA,EAAD,CAAMC,KAAMA,MCUT+B,UAxDyC,SAAC,GAGnD,MAGDX,EAAUC,EALdW,EAEK,EAFLA,KACAC,EACK,EADLA,SAEMC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBR,QAAxB,QACdS,EAAQL,EAAKM,kBAAkBC,MAInC,GAA0B,MAAtBN,EAASO,UAERP,EAASO,SAASC,MAAM,aAAc,CAEzC,IAAMC,EAAUT,EAASO,SAASG,MAAM,KAAK,GACvCC,EAAcZ,EAAKM,kBAAkBO,MAAMC,MAAK,SAAAC,GACrD,GAAIzC,YAAYyC,EAAKC,cAAgBN,EAEpC,OADAtB,EAAW2B,EAAKC,YACT,KAGT3B,EAAauB,EAAYvB,WACzBgB,EAAQO,EAAYL,MAItB,OAAIF,EAAMY,OAAS,EAEjB,kBAACC,EAAA,EAAD,CAAgBjB,SAAUA,EAAUC,UAAWA,GAC9C,kBAAC,IAAD,CAAKN,MAAM,YACTR,EAAW,kBAAC,EAAD,CAAiBA,SAAUA,EAAUC,WAAYA,IAAiB,GAE7EgB,EAAMnC,KAAI,SAAC6C,EAAMI,GAAM,MACQJ,EAAKK,YAA3BxB,EADc,EACdA,MAAOlB,EADO,EACPA,KAAMV,EADC,EACDA,KACrB,OACC,kBAAC,EAAD,CACCI,IAAK+C,EACLvB,MAAOA,EACPlB,KAAMA,EACNV,KAAMA,EACN8B,QAASiB,EAAKjB,QACdD,KAAMkB,EAAKM,OAAOxB,WAUzB,kBAACqB,EAAA,EAAD,CAAgBjB,SAAUA,EAAUC,UAAWA,GAC9C,kBAAC,IAAD,CAAKN,MAAM,cACX","file":"component---src-pages-index-tsx-4fb5fd71f520eb2f9a70.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport COLORS from '../../lib/styles/colors.style'\nimport { toKebabCase } from '../../lib/utils';\n\nconst Wrapper = styled.div`\n    width: inherit;\n    list-style: none;\n    margin-top: 15px;\n\n    @media screen and (max-width: 768px) {\n        margin-top: 10px;\n    }\n`;\n\nconst Tag = styled.a`\n    display: inline-block;\n    padding: 4px 10px;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n    text-align: center;\n    background-color: ${COLORS.TAG_BG};\n    color: ${COLORS.main};\n    font-weight: 500;\n    font-size: 0.9rem;\n\n    @media screen and (max-width: 768px) {\n        padding: 4px 10px;\n        margin-right: 5px;\n        margin-bottom: 5px;\n        font-size: 0.8rem;\n    }\n`;\n\ninterface Tags {\n    tags: Array<string>\n}\n\nconst Tags: React.FC<Tags> = ({ tags }) => {\n    return (\n        <Wrapper>\n            {\n                tags.sort().map(tag => <Tag key={tag} href={`/tags/${toKebabCase(tag)}`}>{tag}</Tag>)\n            }\n        </Wrapper>\n    )\n}\n\nexport default Tags;","import React from 'react'\nimport styled from 'styled-components';\n\n\nconst WrittenDate = styled.span`\n    display: inline-block,\n    color: #919191;\n    marginTop: 12px;\n\n    @media screen and (max-width: 768px) {\n        width: 130px;\n        font-size: 0.7rem;\n    }\n`;\n\ntype PostWrittenDate = {\n    date: string\n}\nconst PostWrittenDate: React.FC<PostWrittenDate> = ({ date }) => {\n    const when = new Date(date);\n    const dayOfMonth = when.getDate(),\n        month = when.getMonth() + 1,\n        year = when.getFullYear();\n    \n    const written = `${year}년 ${month}월 ${dayOfMonth}일`;\n    return (\n        <WrittenDate>\n            {written}\n        </WrittenDate>\n    )\n};\n\nexport default PostWrittenDate;","import React from 'react'\n\ninterface TaggedPostsInfo {\n\ttagValue: string\n\ttotalCount: number\n}\nconst TaggedPostsInfo: React.FC<TaggedPostsInfo> = ({ tagValue, totalCount }) => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Tag: {tagValue}</h1>\n\t\t\t<span>Total: {totalCount}</span>\n\t\t</div>\n\t)\n};\n\nexport default TaggedPostsInfo;","import React from 'react'\nimport styled from 'styled-components';\nimport COLORS from '../../lib/styles/colors.style';\nimport Tags from '../tags/Tags';\nimport PostWrittenDate from './PostWrittenDate';\n\n\nconst PostListWrapper = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    margin: 1.5rem 0;\n    width: 100%\n`;\n\nconst PostListItemWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    border-bottom: 1px solid #e0e0e0bd;\n\n    &:hover {\n        border-color: ${COLORS.MAIN};\n    }\n\n    @media screen and (max-width: 768px) {\n        width: 100%\n    }\n`;\n\nconst PostTitle = styled.a`\n    font-weight: 600;\n    display: inline-block;\n    width: 600px;\n    font-size: 1.5rem;\n    color: ${COLORS.FONT};\n    word-break: break-all;\n\n    @media screen and (max-width: 768px) {\n        font-size: 1.1rem;\n        width: 100%;\n    }\n`;\n\n\nconst PostList: React.FC<Record<string, any>> = ({\n    title, date, tags, slug, excerpt\n}) => {\n\n    return (\n        <PostListWrapper>\n            <PostListItemWrapper>\n                <PostTitle href={slug}>{title}</PostTitle>\n                <PostWrittenDate date={date} />\n            </PostListItemWrapper>\n            <Tags tags={tags} />\n        </PostListWrapper>\n    );\n}\n\nexport default PostList;","import React from 'react'\nimport { PageProps, graphql } from \"gatsby\"\nimport SEO from \"../components/seo\"\nimport { toPascalCase, removeAllWhiteSpace, replaceToWhiteSpace, toKebabCase, replaceAll } from '../lib/utils'\n\nimport LayoutTemplate from '../components/layout/LayoutTemplate'\nimport TaggedPostsInfo from '../components/tags/TaggedPostInfo'\nimport PostList from '../components/post/PostList'\n\nconst Index: React.FC<PageProps<Record<string, any>>> = ({\n\tdata,\n\tlocation,\n}) => {\n\tconst siteTitle = data.site.siteMetadata?.title || `Title`;\n\tlet posts = data.allMarkdownRemark.nodes;\n\tlet tagValue, totalCount;\n\n\t// 인덱스 페이지가 아닐 때\n\tif (location.pathname !== '/') {\n\t\t// 패스 URL이 tags/??? 형태이면\n\t\tif (location.pathname.match(/(tags\\/)/g)) {\n\t\t\t// 해당 그룹으로 포스트 대체\n\t\t\tconst postTag = location.pathname.split('/')[2];\n\t\t\tconst taggedPosts = data.allMarkdownRemark.group.find(post => {\n\t\t\t\tif (toKebabCase(post.fieldValue) === postTag) {\n\t\t\t\t\ttagValue = post.fieldValue;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\ttotalCount = taggedPosts.totalCount;\n\t\t\tposts = taggedPosts.nodes;\n\t\t}\n\t}\n\n\tif (posts.length > 0) {\n\t\treturn (\n\t\t\t<LayoutTemplate location={location} siteTitle={siteTitle}>\n\t\t\t\t<SEO title=\"Apexcel\" />\n\t\t\t\t\t{tagValue ? <TaggedPostsInfo tagValue={tagValue} totalCount={totalCount} /> : ''}\n\t\t\t\t\t{\n\t\t\t\t\t\tposts.map((post, i) => {\n\t\t\t\t\t\t\tconst { title, date, tags } = post.frontmatter;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<PostList\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\t\tdate={date}\n\t\t\t\t\t\t\t\t\ttags={tags}\n\t\t\t\t\t\t\t\t\texcerpt={post.excerpt}\n\t\t\t\t\t\t\t\t\tslug={post.fields.slug}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t</LayoutTemplate>\n\t\t)\n\t}\n\n\treturn (\n\t\t<LayoutTemplate location={location} siteTitle={siteTitle}>\n\t\t\t<SEO title=\"All posts\" />\n\t\t\t<p>No existing post. :(</p>\n\t\t</LayoutTemplate>\n\t)\n}\nexport default Index\n\nexport const pageQuery = graphql`\nquery {\n    site {\n\t\tsiteMetadata {\n\t\t\ttitle\n\t\t}\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n\t\tnodes {\n\t\t\texcerpt(truncate: true)\n\t\t\tfields {\n\t\t\t\tslug\n\t\t\t}\n\t\t\tfrontmatter {\n\t\t\t\tdate(formatString: \"MMMM DD, YYYY\")\n\t\t\t\ttitle\n\t\t\t\tdescription\n\t\t\t\ttags\n\t\t\t}\n\t\t}\n\t\tgroup(field: frontmatter___tags) {\n\t\t\tnodes {\n\t\t\t\texcerpt(truncate: true)\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\tdate\n\t\t\t\t\tdescription\n\t\t\t\t\ttags\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t}\n\t\tfieldValue\n\t\ttotalCount\n\t\t}\n\t}\n}\n`\n"],"sourceRoot":""}