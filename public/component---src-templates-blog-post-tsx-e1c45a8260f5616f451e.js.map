{"version":3,"sources":["webpack:///./src/components/tags/Tags.tsx","webpack:///./src/components/post/PostWrittenDate.tsx","webpack:///./src/components/post/PostNavButton.tsx","webpack:///./src/components/post/PostFooter.tsx","webpack:///./src/components/post/PostArticle.tsx","webpack:///./src/components/post/PostComments.tsx","webpack:///./src/components/TOC.tsx","webpack:///./src/components/post/PostHeader.tsx","webpack:///./src/components/post/PostTemplate.tsx","webpack:///./src/templates/BlogPost.tsx"],"names":["Wrapper","styled","div","Tag","a","COLORS","TAG_BG","main","Tags","tags","sort","map","tag","key","href","toKebabCase","WrittenDate","span","PostWrittenDate","date","when","Date","dayOfMonth","getDate","month","getMonth","written","getFullYear","animation","keyframes","PostNavButtonWrapper","LinkTo","props","isHidden","PostNavButton","postLink","postTitle","postInfo","dir","fields","slug","frontmatter","title","rel","data-dir","SVG","name","width","height","viewBox","color","PostFooterWrapper","nav","PostFooter","prev","next","PostArticleWrapper","article","PostSection","section","PostArticle","post","dangerouslySetInnerHTML","__html","html","CommentWrapper","PostComments","ref","createRef","useEffect","utterances","config","document","createElement","src","repo","theme","crossorigin","async","Object","freeze","entries","forEach","value","setAttribute","current","append","TOC","toc","wrapperRef","useRef","listRef","useState","wrapper","floatTarget","IntersectionObserver","entry","intersectionRatio","classList","remove","add","observe","headings","Array","from","querySelectorAll","convQuery","id","encodeURI","prevY","observer","i","scrollY","globalThis","pageYOffset","pos","v","getBoundingClientRect","y","currentY","boundingClientRect","isIntersecting","element","querySelector","target","index","filter","length","rootMargin","tocEmphasizer","className","replaced","replace","replaceTableOfContents","React","memo","PostHeaderWrapper","PostTitle","h1","FONT","PostHeader","PostTemplateWrapper","PostTemplate","seoTitle","seoDescription","prevPost","nextPost","description","BlogPost","data","location","previous","markdownRemark","siteTitle","site","siteMetadata","tableOfContents","LayoutTemplate","excerpt"],"mappings":"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","file":"component---src-templates-blog-post-tsx-e1c45a8260f5616f451e.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport COLORS from '../../lib/styles/colors.style'\nimport { toKebabCase } from '../../lib/utils';\n\nconst Wrapper = styled.div`\n    width: inherit;\n    list-style: none;\n    margin-top: 15px;\n\n    @media screen and (max-width: 768px) {\n        margin-top: 10px;\n    }\n`;\n\nconst Tag = styled.a`\n    display: inline-block;\n    padding: 4px 10px;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n    text-align: center;\n    background-color: ${COLORS.TAG_BG};\n    color: ${COLORS.main};\n    font-weight: 500;\n    font-size: 0.9rem;\n\n    @media screen and (max-width: 768px) {\n        padding: 4px 10px;\n        margin-right: 5px;\n        margin-bottom: 5px;\n        font-size: 0.8rem;\n    }\n`;\n\ninterface Tags {\n    tags: Array<string>\n}\n\nconst Tags: React.FC<Tags> = ({ tags }) => {\n    return (\n        <Wrapper>\n            {\n                tags.sort().map(tag => <Tag key={tag} href={`/tags/${toKebabCase(tag)}`}>{tag}</Tag>)\n            }\n        </Wrapper>\n    )\n}\n\nexport default Tags;","import React from 'react'\nimport styled from 'styled-components';\n\n\nconst WrittenDate = styled.span`\n    display: inline-block,\n    color: #919191;\n    marginTop: 12px;\n\n    @media screen and (max-width: 768px) {\n        width: 130px;\n        font-size: 0.7rem;\n    }\n`;\n\ntype PostWrittenDate = {\n    date: string\n}\nconst PostWrittenDate: React.FC<PostWrittenDate> = ({ date }) => {\n    const when = new Date(date);\n    const dayOfMonth = when.getDate(),\n        month = when.getMonth() + 1,\n        year = when.getFullYear();\n    \n    const written = `${year}년 ${month}월 ${dayOfMonth}일`;\n    return (\n        <WrittenDate>\n            {written}\n        </WrittenDate>\n    )\n};\n\nexport default PostWrittenDate;","import { Link } from 'gatsby';\nimport React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport SVG from '../common/SVG';\n\nconst animation = keyframes`\n    {\n        0% {\n            transform: translateX(0);\n        }\n        25% {\n            transform: translateX(5px);\n        }\n        50% {\n            transform: translateX(0);\n        }\n        75% {\n            transform: translateX(5px);\n        }\n        100% {\n            transform: translateX(0);\n        }\n    }\n`;\n\nconst PostNavButtonWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border: 1px solid #cfcfcf;\n    height: 80px;\n    width: 300px;\n    padding: 10px;\n\n    div {\n        display: block;\n        width: 220px;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n    &[data-dir='prev'] {\n        text-align: right;\n        em, b {\n            padding-right: 5px;\n        }\n    }\n    &[data-dir='next'] {\n        text-align: left;\n        em, b {\n            padding-left: 5px;\n        }\n    }\n    &:hover {\n        border: 1px solid #9b9b9b;\n        svg {\n            animation-name: ${animation};\n            animation-duration: 1s;\n            animation-timing-function: ease;\n        }\n        path {\n            fill: #1b6339;\n        }\n        b, em {\n            color: #1b6339;\n        }\n    }\n\n    em {\n        display: block;\n        font-size: 0.9rem;\n    }\n\n    b {\n        font-size: 1.1rem;\n    }\n\n    path {\n        fill: #3d3d3d;\n    }\n\n    @media screen and (max-width: 768px) {\n        padding: 0 20px;\n        width: 100%;\n        margin: 0;\n\n        div {\n            width: 100%;\n        }\n    }\n`;\n\ninterface LinkToProps {\n    isHidden: boolean\n}\n\nconst LinkTo = styled.a<LinkToProps>`\n    visibility: ${props => props.isHidden ? 'hidden' : 'visible'};\n\n    @media screen and (max-width: 768px) {\n        width: 100%;\n        margin: 10px 0;\n    }\n`;\n\ninterface PostNavButtonsProps {\n    postInfo: Record<string, any>\n    dir: string\n}\n\nconst PostNavButton: React.FC<PostNavButtonsProps> = ({ postInfo, dir }) => {\n    let postLink, postTitle, isHidden = false;\n\n    if (postInfo) {\n        postLink = postInfo.fields.slug;\n        postTitle = postInfo.frontmatter.title;\n    }\n    else {\n        isHidden = true;\n    }\n\n    return (\n        <LinkTo isHidden={isHidden} href={postLink} rel={dir}>\n            <PostNavButtonWrapper data-dir={dir}>\n                {dir === 'prev'\n                    ? <SVG\n                        name='rewind'\n                        width='32px'\n                        height='32px'\n                        viewBox='0 0 512 512'\n                        color='black' />\n                    : null}\n                <div>\n                    <em>{dir}</em>\n                    <b>{postTitle}</b>\n                </div>\n                {dir === 'next' ?\n                    <SVG\n                        name='fast-forward'\n                        width='32px'\n                        height='32px'\n                        viewBox='0 0 512 512'\n                        color='black'\n                    /> : null}\n            </PostNavButtonWrapper>\n        </LinkTo>\n    )\n}\n\nexport default PostNavButton;","import React from 'react'\nimport styled from 'styled-components'\nimport PostNavButton from './PostNavButton';\n\nconst PostFooterWrapper = styled.nav`\n    display: flex;\n    justify-content: space-between;\n    margin-top: 160px;\n    padding-bottom: 40px;\n\n    @media screen and (max-width: 768px) {\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n    }\n`;\n\nconst PostFooter: React.FC<Record<string, any>> = ({ prev, next }) => {\n    return (\n        <PostFooterWrapper>\n            <PostNavButton postInfo={prev} dir='prev' />\n            <PostNavButton postInfo={next} dir='next' />\n        </PostFooterWrapper>\n    )\n};\n\nexport default PostFooter;","import React from 'react'\nimport styled from 'styled-components';\nimport PostFooter from './PostFooter';\n\nconst PostArticleWrapper = styled.article`\n    ul, p {\n        margin: 28px 0;\n    }\n\n    ul > li > * {\n        word-break: break-all;\n    }\n\n    blockquote p {\n        margin: 0;\n    }\n`;\n\nconst PostSection = styled.section``;\n\nconst PostArticle: React.FC<Record<string, any>> = ({ post, prev, next }) => {\n    return (\n        <PostArticleWrapper>\n            <PostSection dangerouslySetInnerHTML={{ __html: post.html }} />\n            <PostFooter prev={prev} next={next} />\n        </PostArticleWrapper>\n    )\n};\n\nexport default PostArticle;","import React, { createRef, useEffect } from 'react'\nimport styled from 'styled-components';\n\nconst CommentWrapper = styled.div``;\n\nconst PostComments: React.FC = () => {\n    const ref = createRef<HTMLDivElement>();\n    const setUtterancesComment = () => {\n        const utterances = document.createElement('script');\n        const config = {\n            src: \"https://utteranc.es/client.js\",\n            repo: \"apexcel/devlog-comments\",\n            'issue-term': \"pathname\",\n            theme: \"github-light\",\n            crossorigin: \"anonymous\",\n            async: \"true\",\n        };\n        Object.freeze(config);\n        Object.entries(config).forEach(([key, value]) => utterances.setAttribute(key, value));\n        ref.current.append(utterances);\n    }\n\n    useEffect(() => {\n        setUtterancesComment();\n    }, [])\n\n    return (\n        <CommentWrapper ref={ref}/>\n    )\n}\n\nexport default PostComments;\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\n\nconst tocFloater = (wrapper: React.RefObject<HTMLElement>, floatTarget: React.RefObject<HTMLElement>) => {\n    const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n            entry.intersectionRatio > 0.2 ?\n                floatTarget.current?.classList.remove('floating') :\n                floatTarget.current?.classList.add('floating');\n        })\n    });\n    observer.observe(wrapper.current);\n    return () => observer.unobserve(wrapper.current);\n};\n\n\nconst tocEmphasizer = () => {\n    const headings: Array<Element> = Array.from(document.querySelectorAll(`h2, h3, h4`));\n    const convQuery = id => `nav > ul > li a[href=\"#${encodeURI(id)}\"]`;\n    let prevY = 0;\n\n    const observer = new IntersectionObserver(entries => {\n        entries.forEach((entry, i) => {\n            const scrollY = globalThis.pageYOffset;\n            const pos: Array<number> = headings.map(v => v.getBoundingClientRect().y + globalThis.pageYOffset);\n            const currentY = entry.boundingClientRect.y;\n\n            if (!i) {\n                if (entry.isIntersecting) {\n                    document.querySelectorAll(`nav > ul > li a`).forEach(element => element.classList.remove('active'));\n                    document.querySelector(convQuery(entry.target.id))?.classList.add('active');\n                }\n                else if (prevY < currentY - 100) {\n                    document.querySelectorAll(`nav > ul > li a`).forEach(element => element.classList.remove('active'));\n                    const index = pos.filter(y => y < currentY + scrollY).length - 1;\n                    if (index > -1) {\n                        document.querySelector(convQuery(headings[index].id))?.classList.add('active')\n                    }\n                }\n                prevY = currentY\n            }\n        })\n    }, { rootMargin: `0% 0% -95% 0%` });\n\n    headings.forEach(v => observer.observe(v));\n\n    return () => headings.forEach(v => observer.unobserve(v));\n};\n\nconst replaceTableOfContents = (ref: React.RefObject<HTMLElement>, toc: string) => {\n    const replaced = toc.replace(/(<p>)|(<\\/p>)/g, '').replace(/(<a)\\b/g, `<a class='toc-headings'`);\n    return <nav ref={ref} className='toc-list' dangerouslySetInnerHTML={{ __html: replaced }} />\n}\n\nconst createTocElements = (tocItems: Array<Record<string, any>>, activeHash) => {\n    return tocItems.map(item => {\n        const isActive = item.hash === `#${activeHash}`;\n        const currentDepth = item.depth;\n        return (\n            <li key={item.hash}>\n                <a className={`toc-headings ${isActive ? 'active' : ''}`} href={item.hash}>{item.title}</a>\n            </li>\n        )\n    })\n};\n\nconst parseStringToDom = (toc: string) => {\n    const replaced = toc.replace(/(<p>)|(<\\/p>)/g, '');\n    const parsed = new DOMParser().parseFromString(replaced, 'text/html');\n    return Array.from(parsed.querySelectorAll(`body > ul > li`));\n};\n\n\nconst stringToObject = (elements, depth: number = 1) => {\n    const toc = [];\n    for (const element of elements) {\n        if (element.children.length > 0) {\n            if (element.tagName === 'UL') depth = depth + 1;\n            toc.push(...stringToObject(Array.from(element.children), depth));\n        }\n        if (element?.hash) {\n            toc.push({\n                depth: depth,\n                hash: element.hash,\n                title: element.textContent\n            });\n        }\n    }\n    return toc;\n};\n\nconst getTocItems = (toc: string) => {\n    return stringToObject(parseStringToDom(toc));\n}\n\nconst TOC: React.FC<Record<string, any>> = ({ toc }) => {\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const listRef = useRef<HTMLElement>(null);\n    const [activeHash, setActiveHash] = useState<null | string>(null);\n\n    useEffect(() => {\n        tocFloater(wrapperRef, listRef);\n        tocEmphasizer();\n    }, [])\n\n\n    return (\n        <div ref={wrapperRef} className='toc-wrapper'>\n            <div className='toc'>\n                {replaceTableOfContents(listRef, toc)}\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(TOC);","import React from 'react'\nimport styled from \"styled-components\";\nimport COLORS from '../../lib/styles/colors.style';\nimport Tags from \"../tags/Tags\";\nimport TOC from \"../TOC\";\nimport PostWrittenDate from \"./PostWrittenDate\";\n\nconst PostHeaderWrapper = styled.div`\n    margin-bottom: 80px;\n`;\n\nconst PostTitle = styled.h1`\n    color: ${COLORS.FONT};\n    font-size: 2.7rem;\n`;\n\nconst PostHeader: React.FC<Record<string, any>> = ({ post, toc }) => {\n    const { title, date, tags } = post.frontmatter;\n    \n    return (\n        <PostHeaderWrapper>\n            <PostTitle>{title}</PostTitle>\n            <Tags tags={tags} />\n            <PostWrittenDate date={date} />\n            <TOC title={title} toc={toc} />\n        </PostHeaderWrapper>\n    )\n};\n\nexport default PostHeader;","import React from 'react';\nimport styled from \"styled-components\";\nimport SEO from \"../seo\";\nimport PostArticle from \"./PostArticle\";\nimport PostComments from \"./PostComments\";\nimport PostHeader from \"./PostHeader\";\n\nconst PostTemplateWrapper = styled.div`\n    width: 100%;\n`;\n\ninterface PostProps {\n    seoTitle: string\n    seoDescription: string\n    prevPost: string\n    nextPost: string\n    post: Record<string, any>\n    toc: HTMLCollection\n}\n\nconst PostTemplate: React.FC<PostProps> = ({\n    seoTitle,\n    seoDescription,\n    prevPost,\n    nextPost,\n    post,\n    toc,\n}) => {\n    return (\n        <PostTemplateWrapper>\n            <PostHeader post={post} toc={toc} />\n            <SEO title={seoTitle} description={seoDescription} />\n            <PostArticle post={post} prev={prevPost} next={nextPost} />\n            <PostComments />\n        </PostTemplateWrapper>\n    )\n};\n\nexport default PostTemplate;","import React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport PostTemplate from \"../components/post/PostTemplate\"\nimport LayoutTemplate from \"../components/layout/LayoutTemplate\"\n\ntype DataType = {\n  previous: string\n  next: string\n  markdownRemark: Record<string, any>\n  site: Record<string, any>\n}\n\nconst BlogPost: React.FC<PageProps<DataType>> = ({ data, location }) => {\n  const { previous, next } = data;\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const toc = post.tableOfContents;\n\n  return (\n    <LayoutTemplate location={location} siteTitle={siteTitle} postTitle={post.frontmatter.title}>\n      <PostTemplate\n        seoTitle={post.frontmatter.title}\n        seoDescription={post.frontmatter.description || post.excerpt}\n        post={post}\n        prevPost={previous}\n        nextPost={next}\n        toc={toc}\n      />\n    </LayoutTemplate>\n  )\n};\n\nexport default BlogPost;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 200)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n      tableOfContents(absolute: false, maxDepth: 4)\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}